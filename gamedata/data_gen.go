// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version: 3.1.4
package gamedata

import "errors"

type TableEnumValue struct {
	Name  string
	Index int32
}

type ItemType int32

const (
	ItemType_None  = 0 //
	ItemType_Money = 1 // 货币
	ItemType_Exp   = 2 // 经验
	ItemType_Item  = 3 // 道具
)

var (
	ItemTypeEnumValues = []TableEnumValue{
		{Name: "None", Index: 0},  //
		{Name: "Money", Index: 1}, // 货币
		{Name: "Exp", Index: 2},   // 经验
		{Name: "Item", Index: 3},  // 道具
	}
	ItemTypeMapperValueByName = map[string]int32{}
	ItemTypeMapperNameByValue = map[int32]string{}
)

func (self ItemType) String() string {
	name, _ := ItemTypeMapperNameByValue[int32(self)]
	return name
}

type Item struct {
	ID   int32    `tb_name:"ID"`
	Name string   `tb_name:"名称"`
	Type ItemType `tb_name:"类型"`
	Desc string   `tb_name:"描述"`
}

type KV struct {
	ServerIP   string `tb_name:"服务器IP"`
	ServerPort uint16 `tb_name:"服务器端口"`
	BagLimit   uint16 `tb_name:"背包最大容量"`
}

// Combine struct
type Table struct {
	Item []*Item // table: Item
	KV   []*KV   // table: KV

	// Indices
	ItemByID map[int32]*Item `json:"-"` // table: Item

	// Handlers
	postHandlers []func(*Table) error `json:"-"`
	preHandlers  []func(*Table) error `json:"-"`

	indexHandler map[string]func() `json:"-"`
	resetHandler map[string]func() `json:"-"`
}

// table: KV
func (self *Table) GetKeyValue_KV() *KV {
	return self.KV[0]
}

// 注册加载后回调(用于构建数据)
func (self *Table) RegisterPostEntry(h func(*Table) error) {

	if h == nil {
		panic("empty postload handler")
	}

	self.postHandlers = append(self.postHandlers, h)
}

// 注册加载前回调(用于清除数据)
func (self *Table) RegisterPreEntry(h func(*Table) error) {

	if h == nil {
		panic("empty preload handler")
	}

	self.preHandlers = append(self.preHandlers, h)
}

// 清除索引和数据
func (self *Table) ResetData() error {

	err := self.InvokePreHandler()
	if err != nil {
		return err
	}

	return self.ResetTable("")
}

// 全局表构建索引及通知回调
func (self *Table) BuildData() error {

	err := self.IndexTable("")
	if err != nil {
		return err
	}

	return self.InvokePostHandler()
}

// 调用加载前回调
func (self *Table) InvokePreHandler() error {
	for _, h := range self.preHandlers {
		if err := h(self); err != nil {
			return err
		}
	}

	return nil
}

// 调用加载后回调
func (self *Table) InvokePostHandler() error {
	for _, h := range self.postHandlers {
		if err := h(self); err != nil {
			return err
		}
	}

	return nil
}

// 为表建立索引. 表名为空时, 构建所有表索引
func (self *Table) IndexTable(tableName string) error {

	if tableName == "" {

		for _, h := range self.indexHandler {
			h()
		}
		return nil

	} else {
		if h, ok := self.indexHandler[tableName]; ok {
			h()
		}

		return nil
	}
}

// 重置表格数据
func (self *Table) ResetTable(tableName string) error {
	if tableName == "" {
		for _, h := range self.resetHandler {
			h()
		}

		return nil
	} else {
		if h, ok := self.resetHandler[tableName]; ok {
			h()
			return nil
		}

		return errors.New("reset table failed, table not found: " + tableName)
	}
}

// 初始化表实例
func NewTable() *Table {

	self := &Table{
		indexHandler: make(map[string]func()),
		resetHandler: make(map[string]func()),
	}

	self.indexHandler["Item"] = func() {

		for _, v := range self.Item {
			self.ItemByID[v.ID] = v
		}
	}

	self.indexHandler["KV"] = func() {

	}

	self.resetHandler["Item"] = func() {
		self.Item = nil

		self.ItemByID = map[int32]*Item{}
	}
	self.resetHandler["KV"] = func() {
		self.KV = nil

	}

	self.ResetData()

	return self
}

func init() {

	for _, v := range ItemTypeEnumValues {
		ItemTypeMapperValueByName[v.Name] = v.Index
		ItemTypeMapperNameByValue[v.Index] = v.Name
	}

}
